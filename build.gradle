plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.guess-who'
version = '0.2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-docker-compose:3.3.1'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// task to prepare files for AWS deployment
tasks.register('awsBuild') {
    doLast {
        def awsBuildDir = "${buildDir}/aws-build"
        def jarName = "${project.name}-${project.version}.jar"

        // create aws-build directory
        mkdir(awsBuildDir)

        // copy the .jar file to the aws-build directory
        copy {
            from "${buildDir}/libs/${jarName}"
            into awsBuildDir
        }

        // copy additional files from the "aws" directory
        copy {
            from file('aws')
            into awsBuildDir
        }

        // replace @jarname@ token in the Procfile with the actual jar name
        def procfile = file("${awsBuildDir}/Procfile")
        if (procfile.exists()) {
            def content = procfile.text.replace("@jarname@", jarName)
            procfile.text = content
        } else {
            throw new GradleException("Procfile not found in aws-build directory!")
        }
    }
}

// zip everything into aws fat jar
tasks.register('awsJar', Zip) {
    def jarName = "${project.name}-aws-${project.version}.jar"
    from("${buildDir}/aws-build")
    destinationDirectory.set(file("${buildDir}/libs"))
    archiveFileName.set("${jarName}")
}

tasks.named('build').configure {
    dependsOn 'awsJar'
}

tasks.named('awsJar').configure {
    dependsOn 'awsBuild'
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs("-XX:+EnableDynamicAgentLoading", "-Xshare:off")
}
